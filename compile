#!/bin/bash

#stop on error, unset variables or pipe failures. 
set -euo pipefail

echo "Tidy up..."
rm -f build/*

echo "Compile nucleus..."
# I tried using gforth to access the forth files from the libforth directory
# that would be cleaner, but it just would not work.
# So like Mecrisp Ice, I now copy them to the local directory
# use them, then delete them.  Pull requests accepted. 
cp libforth/cross.fs libforth/instructionset.fs libforth/nucleus.fs libforth/nucleuslib.fs .
gforth cross.fs instructionset.fs nucleus.fs
rm cross.fs instructionset.fs nucleus.fs nucleuslib.fs

echo ""
echo "Compile additional Forth sources..."

cat libforth/coredefinitions.fs  \
    libforth/basisdefinitions.fs \
    libforth/fixpoint.fs         \
    libforth/double.fs           \
    forth/load.fs > build/included.fs

# insight has to be the last file included
# because it has the new command, which resets
# memory pointer to the original base. 

#    \ forth/debug.fs      \
cat libforth/insight.fs \
    forth/debug.fs      \
    forth/forward.fs    \
    forth/load.fs       \
    forth/boot.fs       \
    >> build/included.fs


cp build/nucleus.hex build/iceimage.hex


osStr=$(uname)
cpuStr=$(uname -m)
if [[ "$osStr" == 'Darwin' ]] && [[ "$cpuStr" = 'arm64' ]] ; then
    echo Compiling the rest of the Forth
    cat build/included.fs | ./Hana1.macos > build/log.txt
elif [[ "$osStr" == 'Linux' ]] && [[ "$cpuStr" = 'x86' ]] ; then
    echo Compiling the rest of the Forth
    cat build/included.fs | ./Hana1.linux > build/log.txt        
else
  echo "Only Mac OS on Apple hardware, and Linux on x86 are supported"
fi

mv coredump.hex build/iceimage.hex

echo "Creating Flash"
#This converts the program into a version to be stored in Flash. 
#cd binary/flash
#rm flash.hex
#python3 flash.py
#cd ../..

#Just to make sure that the code is being compiled.
echo "The following two values should be different." 
md5sum build/nucleus.hex build/iceimage.hex
